exit
Time.now + 3 * 60 * 1000
(Time.now + 3.minutes).to_i
Time.now.to_i
Time.now + 3.minutes
Time.now
exit
decoded_token[0]["exp"] - Time.now.to_i
decoded_token[0]["exp"]
decoded_token[0]["exp]
decoded_token[0][:exp]
decoded_token
exit
JWT.decode split_token[1], 'test_secret_key', true, { :algorithm => 'HS256' }
split_token = auth_token.split(' ')
JWT.decode auth_token, 'test_secret_key', true, { :algorithm => 'HS256' }
JWT
auth_token
auth_token = request.headers[:HTTP_AUTHORIZATION]
request.headers[:HTTP_AUTHORIZATION]
request.headers.HTTP_AUTHORIZATION
request.headers.authorization
request.headers.uthorization
request.headers.Authorization
request.headers
request.header
request
req
exit
JWToken.new(u)
exit
JWToken.new(u)
require 'token.rb'
JWToken.new(u)
u
exit
local_secret_getter
exit
local_hmac_secret
exit
local_hmac_secret
exit
local_hmac_secret
exit
local_hmac_secret
exit
$LOAD_PATH
exit
u.authenticate(params[:password])
u
u = User.find_by(email: params[:email])
params
